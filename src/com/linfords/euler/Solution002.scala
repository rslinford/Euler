package com.linfords.euler

/*
Credit goes to excellent tutorial by MadocDoyu:

  http://www.youtube.com/watch?v=xtvvhS0QiC0
*/


/*
Euler Project Problem 2
19 October 2001

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
*/

/**
Java like version
 */
object Solution002_v1 extends App {
  def solve = {
    var f = 1
    var g = 2
    var sum = 0
    while (f < 4000000) {
      if (f % 2 == 0) sum += f
      val swap = f
      f = g
      g += swap
    }
    sum
  }
  println("Solution 1: " + solve)
}

/**
Scala like version
 */
object Solution002_v2 extends App {
  def solve = {
    def fib: Stream[Int] = {
      def recurse(a: Int, b: Int): Stream[Int] = Stream.cons(a, recurse(b, a + b))
      recurse(1, 2)
    }
    fib.filter({x => x % 2 == 0}).takeWhile({x => x < 4000000}).sum
  }

  println("Solution 2: " + solve)
}

/**
Total Scalafication
 */
object Solution002_v3 extends App {
  def solve = {
    def fib(a: Int = 1, b: Int = 2): Stream[Int] = Stream.cons(a, fib(b, a + b))
    fib().filter(_ % 2 == 0).takeWhile(_ < 4000000).sum
  }
  println("Solution 3: " + solve)
}

object CrossChecker002 extends App {
  val s1 = Solution002_v1.solve
  val s2 = Solution002_v2.solve
  val s3 = Solution002_v3.solve
  println("s1(" + s1 + ") s2(" + s2 + ") s3(" + s3 + ") cross check: " + (s1 == s2 && s1 == s3))
}