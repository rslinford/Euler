package com.linfords.euler

/*
Euler Project Problem xyz
08 March 2002

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

object Solution012 extends App {
  def triangleSeries(n: Int = 1, sum: Int = 1): Stream[Int] = Stream.cons(sum, triangleSeries(n + 1, n + 1 + sum))

  def countDivisors(n: Int, i: Int = 1, count: Int = 0): Int = {
    val c = if (n % i == 0) count + 1 else count
    if (n == i) c else countDivisors(n, i + 1, c)
  }

  def solve: Int = {
    triangleSeries().find(countDivisors(_) > 500).head
  }

  println("Answer: " + solve)
}

object UnitTest012 extends App {
  val s = Solution012
  assert(s.triangleSeries().take(1).last == 1)
  assert(s.triangleSeries().take(4).last == 10)
  assert(s.triangleSeries().take(7).last == 28)

  assert(s.countDivisors(1) == 1)
  assert(s.countDivisors(3) == 2)
  assert(s.countDivisors(21) == 4)
  assert(s.countDivisors(28) == 6)

  println("*** All systems go ***")
}